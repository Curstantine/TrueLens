// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Post {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String @db.ObjectId

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(auto()) @map("_id") @db.ObjectId
    userId                   String  @db.ObjectId
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    comments      Comment[]  // Add the relation to Comment
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Waitlist {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    email     String   @unique
    createdAt DateTime @default(now())
}

// Represents a Comment associated with a user and an article
model Comment {
    id         String    @id @default(auto()) @map("_id") @db.ObjectId
    content    String
    createDate DateTime  @default(now())
    user       User      @relation(fields: [userId], references: [id])
    userId     String    @db.ObjectId
    article    Article   @relation(fields: [articleId], references: [id])
    articleId  String    @db.ObjectId
}

// Represents a Reporter who writes articles for a NewsOutlet
model Reporter {
    id        String      @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    email     String      @unique
    articles  Article[]
    outlet    NewsOutlet  @relation(fields: [outletId], references: [id])
    outletId  String      @db.ObjectId
}

// Represents a Story that groups related articles
model Story {
    id          String     @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    description String
    articles    Article[]
}

// Represents an Article written by a reporter and belonging to a story
model Article {
    id             String     @id @default(auto()) @map("_id") @db.ObjectId
    title          String
    content        String
    publicationDate DateTime  @default(now())
    reporter       Reporter   @relation(fields: [reporterId], references: [id])
    reporterId     String     @db.ObjectId
    story          Story      @relation(fields: [storyId], references: [id])
    storyId        String     @db.ObjectId
    comments       Comment[]
}

// Represents a NewsOutlet that employs reporters
model NewsOutlet {
    id           String      @id @default(auto()) @map("_id") @db.ObjectId
    name         String
    headquarters String
    reporters    Reporter[]
}