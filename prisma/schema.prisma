// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(auto()) @map("_id") @db.ObjectId
    userId                   String  @db.ObjectId
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    refresh_token_expires_in Int?
    password                 String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//use enum for different users 
enum UserRole {
    ADMIN
    MODERATOR
    FREE
    PAID
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    email         String?   @unique
    emailVerified DateTime?
    name          String?
    image         String?
    role          UserRole  @default(FREE)
    country       String?
    isOnboarded   Boolean   @default(false)
    createdAt     DateTime  @default(now())

    accounts Account[]
    sessions Session[]
    comments Comment[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Waitlist {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    email     String   @unique
    createdAt DateTime @default(now())
}

// Represents a Comment associated with a user and an article
model Comment {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    content    String
    storyId    String   @db.ObjectId
    userId     String   @db.ObjectId
    createdAt  DateTime @default(now())
    modifiedAt DateTime @default(now())

    story Story @relation(fields: [storyId], references: [id])
    user  User  @relation(fields: [userId], references: [id])
}

// Represents a Reporter who writes articles for a NewsOutlet
model Reporter {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    email     String   @unique
    isSystem  Boolean  @default(false)
    avatarUrl String?
    outletId  String   @db.ObjectId
    createdAt DateTime @default(now())

    articles Article[]
    outlet   NewsOutlet @relation(fields: [outletId], references: [id])
}

// Represents a Story that groups related articles
model Story {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    title      String
    summary    String[]
    createdAt  DateTime @default(now())
    modifiedAt DateTime @default(now())

    articles Article[]
    comments Comment[]
}

// Represents an Article written by a reporter and belonging to a story
model Article {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    content     String
    externalUrl String   @unique
    reporterId  String   @db.ObjectId
    storyId     String   @db.ObjectId
    publishedAt DateTime @default(now())
    createdAt   DateTime @default(now())

    story    Story    @relation(fields: [storyId], references: [id])
    reporter Reporter @relation(fields: [reporterId], references: [id])
}

// Represents a NewsOutlet that employs reporters
model NewsOutlet {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    name         String
    headquarters String
    createdAt    DateTime @default(now())
    logoUrl      String?

    reporters Reporter[]
}

model Configuration {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    key       String   @unique
    value     String
    createdAt DateTime @default(now())
}
